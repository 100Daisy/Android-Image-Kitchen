#!/sbin/sh
# AIK-Mobile Installer Script: Recovery Flashable Zip
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";

# Magisk Manager/booted flashing support
test -e /data/adb/magisk && adb=adb;
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false;
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;
if $BOOTMODE; then
  OUTFD=/proc/self/fd/0;
  dev=/dev;
  devtmp=/dev/tmp;
  if [ -e /data/$adb/magisk ]; then
    if [ ! -f /data/$adb/magisk_merge.img -a ! -e /data/adb/modules ]; then
      (/system/bin/make_ext4fs -b 4096 -l 64M /data/$adb/magisk_merge.img || /system/bin/mke2fs -b 4096 -t ext4 /data/$adb/magisk_merge.img 64M) >/dev/null;
    fi;
    test -e /magisk/.core/busybox && magiskbb=/magisk/.core/busybox;
    test -e /sbin/.core/busybox && magiskbb=/sbin/.core/busybox;
    test -e /sbin/.magisk/busybox && magiskbb=/sbin/.magisk/busybox;
    test "$magiskbb" && export PATH="$magiskbb:$PATH";
  fi;
fi;

ui_print() { $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_progress() { echo "set_progress $1" > $OUTFD; }
file_getprop() { grep "^$2" "$1" | head -n1 | cut -d= -f2; }
set_perm() {
  uid=$1; gid=$2; mod=$3;
  shift 3;
  chown $uid:$gid "$@" || chown $uid.$gid "$@";
  chmod $mod "$@";
}
set_perm_recursive() {
  uid=$1; gid=$2; dmod=$3; fmod=$4;
  shift 4;
  until [ ! "$1" ]; do
    chown -R $uid:$gid "$1" || chown -R $uid.$gid "$1";
    find "$1" -type d -exec chmod $dmod {} +;
    find "$1" -type f -exec chmod $fmod {} +;
    shift;
  done;
}
abort() {
  ui_print " ";
  ui_print "Your system has not been changed.";
  ui_print " ";
  ui_print "Script will now exit...";
  ui_print " ";
  test "$suimg" && umount $mnt;
  test "$sar" && mount -o ro,remount /;
  umount /system;
  umount /data;
  umount /cache;
  exit 1;
}

ui_print " ";
ui_print "Android Image Kitchen - Mobile Edition";
ui_print "Installer Script";
ui_print "by osm0sis @ xda-developers";
modname=aik-mobile;
show_progress 1.34 0;

ui_print " ";
ui_print "Mounting...";
mount -o ro /system;
mount /data;
mount /cache;
test -f /system/system/build.prop && root=/system;
set_progress 0.2;

ui_print " ";
ui_print "Extracting files...";
mkdir -p $dev/tmp/$modname;
cd $dev/tmp/$modname;
unzip -o "$ZIPFILE";
set_progress 0.3;

ui_print " ";
ui_print "Installing to /data/local/AIK-mobile/ ...";
abi=`file_getprop $root/system/build.prop ro.product.cpu.abi`;
case $abi in
  arm*|x86*|mips*) ;;
  *) abi=`getprop ro.product.cpu.abi`;;
esac;
case $abi in
  arm*|x86*|mips*) ;;
  *) abi=`file_getprop /default.prop ro.product.cpu.abi`;;
esac;
case $abi in
  arm64*) arch=arm64;;
  arm*) arch=arm;;
  x86_64*) arch=x86_64;;
  x86*) arch=x86;;
  mips64*) arch=mips64;;
  mips*) arch=mips;;
  *) ui_print "Unknown architecture: $abi"; abort;;
esac;
ui_print "Using architecture: $arch";
cd bin;
# work around scenarios where toybox's limited tar would be used (old Magisk Manager PATH issue, TWRPs without busybox)
tar -xzf xz.tar.gz $arch/xz;
set_perm 0 0 755 $arch/xz;
$arch/xz -dc $arch.tar.xz | tar -x;
cd ..;
rm -r /data/local/AIK-mobile;
cp -rf data/* /data;
cp -rf bin/$arch/* /data/local/AIK-mobile/bin/;
cp -f module.prop /data/local/AIK-mobile/bin/;
set_perm_recursive 0 0 0755 0755 "/data/local/AIK-mobile";
set_perm_recursive 0 0 0755 0644 "/data/local/AIK-mobile/bin/avb" "/data/local/AIK-mobile/bin/chromeos";
set_perm 0 0 0644 "/data/local/AIK-mobile/authors.txt" "/data/local/AIK-mobile/bin/androidbootimg.magic" "/data/local/AIK-mobile/bin/BootSignature_Android.jar" "/data/local/AIK-mobile/bin/module.prop" "/data/local/AIK-mobile/bin/magic";
set_progress 0.8;

# Magisk clean flash support
if [ -e /data/$adb/magisk -a ! -e /data/$adb/magisk.img -a ! -e /data/adb/modules ]; then
  make_ext4fs -b 4096 -l 64M /data/$adb/magisk.img || mke2fs -b 4096 -t ext4 /data/$adb/magisk.img 64M;
fi;

ui_print " ";
suimg=`(ls /data/$adb/magisk_merge.img || ls /data/su.img || ls /cache/su.img || ls /data/$adb/magisk.img || ls /cache/magisk.img) 2>/dev/null`;
mnt=$devtmp/$(basename $suimg .img);
if [ "$suimg" ]; then
  umount $mnt;
  test ! -e $mnt && mkdir -p $mnt;
  mount -t ext4 -o rw,noatime $suimg $mnt;
  for i in 0 1 2 3 4 5 6 7; do
    test "$(mount | grep " $mnt ")" && break;
    loop=/dev/block/loop$i;
    if [ ! -f "$loop" -o ! -b "$loop" ]; then
      mknod $loop b 7 $i;
    fi;
    losetup $loop $suimg && mount -t ext4 -o loop,noatime $loop $mnt;
  done;
  case $mnt in
    */magisk*) magisk=/$modname/system;;
  esac;
  target=$mnt$magisk/bin;
else
  # SuperSU BINDSBIN support
  mnt=$(dirname `find /data -name supersu_is_here | head -n1` 2>/dev/null);
  if [ -e "$mnt" ]; then
    target=$mnt/bin;
  elif [ -e "/data/adb/modules" ]; then
    mnt=/data/adb/modules_update;
    magisk=/$modname/system;
    target=$mnt$magisk/bin;
  else
    mount -o rw,remount /system || mount /system || mount -o rw,remount / && sar=1;
    target=$root/system/xbin;
  fi;
fi;
ui_print "Creating helper script $target/aik ...";
mkdir -p $target;
cp -pf "/data/local/AIK-mobile/bin/aik" "$target/aik";
if [ "$magisk" ]; then
  cp -f module.prop "$mnt/$modname/";
  touch "$mnt/$modname/auto_mount";
  chcon -hR 'u:object_r:system_file:s0' "$mnt/$modname";
  if $BOOTMODE; then
    test -e /magisk && imgmnt=/magisk || imgmnt=/sbin/.core/img;
    test -e /sbin/.magisk/img && imgmnt=/sbin/.magisk/img;
    test -e /data/adb/modules && imgmnt=/data/adb/modules;
    mkdir -p "$imgmnt/$modname";
    touch "$imgmnt/$modname/update";
    cp -f module.prop "$imgmnt/$modname/";
  fi;
fi;
set_progress 1.0;

ui_print " ";
ui_print "Unmounting...";
test "$suimg" && umount $mnt;
test "$loop" && losetup -d $loop;
test "$sar" && mount -o ro,remount /;
umount /system;
umount /data;
umount /cache;
set_progress 1.2;

cd /;
rm -rf /tmp/$modname /dev/tmp;
ui_print " ";
ui_print "Done!";
ui_print " ";
ui_print "Run 'aik' from the commandline when booted";
ui_print "then 'unpackimg.sh -.img' to get started.";
ui_print "Or, copy an .img and run from an explorer app.";
set_progress 1.34;
exit 0;

